---

- name: Post-install | Get org-ID (1)
  when: item.org in orgs | json_query('[*].id')
  set_fact: org_id="{{ item.org }}"

- name: Post-install | Get org-ID (2)
  when: item.org not in orgs | json_query('[*].id')
  set_fact: org_id="{{ orgs | json_query(query) }}"
  vars:
      query: "[?name=='{{ item.org }}'].id"

- name: Post-install | Check if org exists
  fail: msg="org {{ item.org }} does not exist"
  when: org_id is undefined

- name: Post-install | Create the bucket
  when: item.name not in buckets | json_query('[*].name')
  block:
    - name: Post-install | Convert retention value to seconds
      set_fact: retention_seconds={{ item.retention_hours  | int * 12960000 }}

    - name: Post-install | Create the bucket
      register: bucket_info
      uri:
        url: "{{ buckets_endpoint }}"
        method: POST
        body_format: json
        status_code: 201
        body: "{{ bucket_body }}"
        headers:
            Authorization: "Token {{ influxdb_api.token }}"
      vars:
        bucket_body: '{
            "description": "{{ item.description | default() }}",
            "name": "{{ item.name }}",
            "orgID": "{{ org_id[0] }}",
            "retentionRules": [
                {
                    "type": "expire",
                    "everySeconds": {{ retention_seconds | int }}
                }
            ]
        }'

    - name: Post-install | Set local fact
      set_fact: bucket_id="{{ bucket_info.json.id }}"

- name: Post-install | Get bucket-ID
  when: item.name in buckets | json_query('[*].name')
  set_fact: bucket_id="{{ buckets | json_query(query) }}"
  vars:
      query: "[?name=='{{ item.name }}'].id"

- name: Post-install | Get read-only token
  when: item.create_read_token | lower == 'true'
  block:
    - name: Post-install | Create read-only token
      register: auth_info
      uri:
        url: "{{ authorizations_endpoint }}"
        method: POST
        body_format: json
        status_code: 201
        body: "{{ auth_body | to_json }}"
        headers:
            Authorization: "Token {{ influxdb_api.token }}"
      vars:
        auth_body:
            description: "Read-only token for {{ item.org }} / {{ item.name }}"
            orgID: "{{ org_id[0] }}"
            permissions:
                - action: read
                  resource:
                      type: authorizations
                      id: "{{ bucket_id[0] }}"
                      name: "{{ item.name }}"
                      orgID: "{{ org_id[0] }}"
            status: "active"

    - name: Write the token to file
      lineinfile:
          path: "{{ influxdb_api.tokens_output_file }}"
          state: present
          regexp: '^{{ item.org }},{{ item.name }},read,'
          line: '{{ item.org }},{{ item.name }},read,{{ auth_info.json.token }}'

- name: Post-install | Get write-only token
  when: item.create_write_token | lower == 'true'
  block:
    - name: Post-install | Create write-only token
      register: auth_info
      uri:
        url: "{{ authorizations_endpoint }}"
        method: POST
        body_format: json
        status_code: 201
        body: "{{ auth_body | to_json }}"
        headers:
            Authorization: "Token {{ influxdb_api.token }}"
      vars:
        auth_body:
            description: "Write-only token for {{ item.org }} / {{ item.name }}"
            orgID: "{{ org_id[0] }}"
            permissions:
                - action: write
                  resource:
                      type: authorizations
                      id: "{{ bucket_id[0] }}"
                      name: "{{ item.name }}"
                      orgID: "{{ org_id[0] }}"
            status: "active"

    - name: Write the token to file
      lineinfile:
          path: "{{ influxdb_api.tokens_output_file }}"
          state: present
          regexp: '^{{ item.org }},{{ item.name }},write,'
          line: '{{ item.org }},{{ item.name }},write,{{ auth_info.json.token }}'
